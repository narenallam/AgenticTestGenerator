[project]
name = "genai-test-agent"
version = "1.0.0"
description = "Enterprise-grade agentic unit test generator using RAG and LangGraph"
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}
authors = [
    {name = "GenAI Agents Contributors"}
]
keywords = [
    "testing",
    "code-generation",
    "ai",
    "llm",
    "langchain",
    "langgraph",
    "rag",
    "ollama",
    "test-automation"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Testing",
    "Topic :: Software Development :: Code Generators",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]

dependencies = [
    # Core AI/ML
    "ollama>=0.4.4",
    "langgraph>=0.2.45",
    "langchain>=0.3.13",
    "langchain-community>=0.3.13",
    "langchain-ollama>=0.2.0",
    "langchain-openai>=0.2.14",
    "langchain-google-genai>=2.0.8",
    "openai>=1.58.1",
    "google-generativeai>=0.8.3",
    
    # Vector Store & Embeddings
    "chromadb>=0.5.23",
    
    # Git Integration
    "gitpython>=3.1.43",
    
    # Testing Framework
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-timeout>=2.3.1",
    
    # Sandbox & Security
    "docker>=7.1.0",
    
    # Observability
    "loguru>=0.7.2",
    "tinydb>=4.8.0",
    
    # Data Processing
    "pydantic>=2.12.3",
    "pydantic-settings>=2.7.0",
    "python-dotenv>=1.0.1",
    
    # HTTP & API
    "httpx>=0.28.1",
    "requests>=2.31.0",
    
    # Utilities
    "rich>=14.2.0",
    "tenacity>=9.1.2",
]

[project.optional-dependencies]
dev = [
    # Code Quality
    "black>=24.10.0",
    "flake8>=7.1.1",
    "mypy>=1.13.0",
    "pylint>=3.3.2",
    "isort>=5.13.2",
    "types-requests>=2.31.0.20240125",
    
    # Development Tools
    "ipython>=8.12.0",
    "jupyter>=1.0.0",
]

test = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-mock>=3.14.0",
    "pytest-timeout>=2.3.1",
    "pytest-asyncio>=0.23.0",
]

docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.5.0",
    "mkdocstrings[python]>=0.24.0",
]

all = [
    "genai-test-agent[dev,test,docs]",
]

[project.urls]
Homepage = "https://github.com/yourusername/genai-agents"
Documentation = "https://github.com/yourusername/genai-agents#readme"
Repository = "https://github.com/yourusername/genai-agents"
Issues = "https://github.com/yourusername/genai-agents/issues"

[project.scripts]
genai-test = "main:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src", "config"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | venv
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_calls = false
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
follow_imports = "normal"
ignore_missing_imports = true
strict_optional = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --cov=src --cov=config --cov-report=term-missing --cov-report=html"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.coverage.run]
source = ["src", "config"]
omit = [
    "*/tests/*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstractmethod",
]

[tool.pylint.messages_control]
disable = [
    "C0330",
    "C0326",
    "missing-module-docstring",
    "missing-function-docstring",
]

[tool.pylint.format]
max-line-length = 100

[tool.ruff]
line-length = 100
target-version = "py311"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
